#include <iostream>
#include <vector>
#include <string>
#include <iomanip>
#include <ctime>
#include <sstream>

using namespace std;

struct Estudiante {
    int codigo;               
    string nombres;
    string apellidos;
    string carrera;
    string direccion;
    string departamento;
    string municipio;
    string aldea;             
    string telefonoPersonal;
    string telefonoCasa;
    string telefonoEmergencia;
    string fechaNacimiento;    
    int edad;                 
    int anioIngreso;
    string correo;
};

struct Curso {
    string codigoCurso;
    string nombreCurso;
    int idEstudiante;         
    string semestre;
    int creditos;
};

struct Nota {
    int idEstudiante;        
    string cursoNombre;
    float notaParcial1;
    float notaParcial2;
    float notaFinal;
    bool aprobado;
};



class SistemaUniversitario {
private:
    vector<Estudiante> estudiantes;
    vector<Curso> cursos;
    vector<Nota> notas;

    int calcularEdad(const string& fechaNacimiento) {
        struct tm tm = {};
        stringstream ss(fechaNacimiento);
        int dia, anio;
        string mes;
        ss >> dia >> mes >> anio;

        if (mes == "enero") tm.tm_mon = 0;
        else if (mes == "febrero") tm.tm_mon = 1;
        else if (mes == "marzo") tm.tm_mon = 2;
        else if (mes == "abril") tm.tm_mon = 3;
        else if (mes == "mayo") tm.tm_mon = 4;
        else if (mes == "junio") tm.tm_mon = 5;
        else if (mes == "julio") tm.tm_mon = 6;
        else if (mes == "agosto") tm.tm_mon = 7;
        else if (mes == "septiembre") tm.tm_mon = 8;
        else if (mes == "octubre") tm.tm_mon = 9;
        else if (mes == "noviembre") tm.tm_mon = 10;
        else if (mes == "diciembre") tm.tm_mon = 11;

        tm.tm_mday = dia;
        tm.tm_year = anio - 1900; // Años desde 1900
        time_t ahora = time(0);
        time_t fechaNac = mktime(&tm);
        double edadEnSegundos = difftime(ahora, fechaNac);
        return static_cast<int>(edadEnSegundos / (365 * 24 * 60 * 60)); 
    }

public:
    void registrarEstudiante() {
        Estudiante nuevoEstudiante;
        nuevoEstudiante.codigo = estudiantes.size() + 1; 
        cout << "Ingrese los nombres del estudiante: ";
        cin.ignore();
        getline(cin, nuevoEstudiante.nombres);
        cout << "Ingrese los apellidos del estudiante: ";
        getline(cin, nuevoEstudiante.apellidos);
        
        cout << "Seleccione la carrera (1. Ingeniería, 2. Administración, 3. Derecho): ";
        int opcionCarrera;
        cin >> opcionCarrera;
        switch (opcionCarrera) {
            case 1: nuevoEstudiante.carrera = "Ingeniería"; break;
            case 2: nuevoEstudiante.carrera = "Administración"; break;
            case 3: nuevoEstudiante.carrera = "Derecho"; break;
            default: nuevoEstudiante.carrera = "No especificada"; break;
        }

        cout << "Ingrese la dirección: ";
        cin.ignore(); 
        getline(cin, nuevoEstudiante.direccion);
        
        cout << "Ingrese el departamento: ";
        getline(cin, nuevoEstudiante.departamento);
        
        cout << "Ingrese el municipio: ";
        getline(cin, nuevoEstudiante.municipio);
        
        cout << "Ingrese la aldea (opcional): ";
        getline(cin, nuevoEstudiante.aldea);
        
        cout << "Ingrese el teléfono personal: ";
        getline(cin, nuevoEstudiante.telefonoPersonal);
        
        cout << "Ingrese el teléfono de casa: ";
        getline(cin, nuevoEstudiante.telefonoCasa);
        
        cout << "Ingrese el teléfono de emergencia: ";
        getline(cin, nuevoEstudiante.telefonoEmergencia);
        
        cout << "Ingrese la fecha de nacimiento (ejemplo: 26 diciembre 2024): ";
        getline(cin, nuevoEstudiante.fechaNacimiento);
        nuevoEstudiante.edad = calcularEdad(nuevoEstudiante.fechaNacimiento);
        
        if (nuevoEstudiante.edad < 0) {
            cout << "No se pudo calcular la edad. Registro cancelado." << endl;
            return;
        }
        cout << "Ingrese el año de ingreso a la universidad: ";
        cin >> nuevoEstudiante.anioIngreso;
        
        cout << "Ingrese el correo electrónico: ";
        cin.ignore(); 
        getline(cin, nuevoEstudiante.correo);

        estudiantes.push_back(nuevoEstudiante);
        cout << "Estudiante registrado con éxito. Código: " << nuevoEstudiante.codigo << endl;
    }

void asignarCurso() {
        Curso nuevoCurso;
        cout << "Ingrese el código del curso: ";
        cin >> nuevoCurso.codigoCurso;
        cout << "Ingrese el nombre del curso: ";
        cin.ignore(); 
        getline(cin, nuevoCurso.nombreCurso);
        
        cout << "Ingrese el ID del estudiante: ";
        cin >> nuevoCurso.idEstudiante;
        
        cout << "Seleccione el semestre (1. Primer Semestre, 2. Segundo Semestre): ";
        int semestreOpcion;
        cin >> semestreOpcion;
        nuevoCurso.semestre = (semestreOpcion == 1) ? "Primer Semestre" : "Segundo Semestre";
        
        cout << "Ingrese los créditos (automático según el curso): ";
        cin >> nuevoCurso.creditos;
        
        cursos.push_back(nuevoCurso);
        cout << "Curso asignado con éxito." << endl;
    }









  void registrarNota() {
        Nota nuevaNota;
        cout << "Ingrese el ID del estudiante: ";
        cin >> nuevaNota.idEstudiante;
        cout << "Ingrese el nombre del curso: ";
        cin.ignore(); 
        getline(cin, nuevaNota.cursoNombre);
        
        cout << "Ingrese la nota del primer parcial: ";
        cin >> nuevaNota.notaParcial1;
        
        cout << "Ingrese la nota del segundo parcial: ";
        cin >> nuevaNota.notaParcial2;
        
        nuevaNota.notaFinal = (nuevaNota.notaParcial1 + nuevaNota.notaParcial2) / 2;
        nuevaNota.aprobado = (nuevaNota.notaFinal >= 60);
        
        notas.push_back(nuevaNota);
        cout << "Nota registrada con éxito." << endl;
    }

void generarReportes() {
        cout << "Reportes Académicos:" << endl;

        cout << "\nReporte de Datos Generales de los Estudiantes:" << endl;
        for (size_t i = 0; i < estudiantes.size(); i++) {
            const Estudiante& est = estudiantes[i];
            cout << "Estudiante: " << est.nombres << " " << est.apellidos
                 << " (Código: " << est.codigo << ", Carrera: " << est.carrera << ")" << endl;
            cout << "Edad: " << est.edad << ", Correo: " << est.correo << endl;
            cout << "Teléfono Personal: " << est.telefonoPersonal << endl;
        }

        cout << "\nReporte de Asignación de Cursos:" << endl;
        for (size_t i = 0; i < cursos.size(); i++) {
            const Curso& curso = cursos[i];
            cout << "Curso: " << curso.nombreCurso << " (Código: " << curso.codigoCurso
                 << ", Estudiante ID: " << curso.idEstudiante
                 << ", Semestre: " << curso.semestre << ", Créditos: " << curso.creditos << ")" << endl;
        }

        cout << "\nReporte de Notas:" << endl;
        for (size_t i = 0; i < notas.size(); i++) {
            const Nota& nota = notas[i];
            cout << "Estudiante ID: " << nota.idEstudiante << ", Curso: " << nota.cursoNombre
                 << ", Nota Parcial 1: " << nota.notaParcial1
                 << ", Nota Parcial 2: " << nota.notaParcial2
                 << ", Nota Final: " << fixed << setprecision(2) << nota.notaFinal
                 << ", Estado: " << (nota.aprobado ? "Aprobado" : "Reprobado") << endl;
        }

        cout << "\nReporte de Rendimiento Académico:" << endl;
        for (size_t i = 0; i < estudiantes.size(); i++) {
            const Estudiante& est = estudiantes[i];
            float promedio = 0;
            int numCursos = 0;
            int cursosAprobados = 0;
            for (size_t j = 0; j < notas.size(); j++) {
                const Nota& nota = notas[j];
                if (nota.idEstudiante == est.codigo) {
                    promedio += nota.notaFinal;
                    numCursos++;
                    if (nota.aprobado) {
                        cursosAprobados++;
                    }
                }
            }
            if (numCursos > 0) {
                promedio /= numCursos; // Calcular promedio
                cout << "Estudiante: " << est.nombres << " " << est.apellidos
                     << " - Promedio General: " << fixed << setprecision(2) << promedio
                     << ", Cursos Aprobados: " << cursosAprobados << ", Cursos Reprobados: " << (numCursos - cursosAprobados) << endl;
            }
        }
    }
};

int main() {
    SistemaUniversitario sistema;
    int opcion;

    do {
        cout << "\nSistema de Registro Universitario" << endl;
        cout << "1. Registro de Estudiantes" << endl;
        cout << "2. Asignación de Cursos" << endl;
        cout << "3. Control de Notas" << endl;
        cout << "4. Reportes Académicos" << endl;
        cout << "5. Salir" << endl;
        cout << "Seleccione una opción: ";
        cin >> opcion;

        switch (opcion) {
            case 1:
                sistema.registrarEstudiante();
                break;
            case 2:
                sistema.asignarCurso();
                break;
            case 3:
                sistema.registrarNota();
                break;
            case 4:
                sistema.generarReportes();
                break;
            case 5:
                cout << "Saliendo del sistema..." << endl;
                break;
            default:
                cout << "Opción no válida, por favor intente de nuevo." << endl;
        }
    } while (opcion != 5);

    return 0;
}














